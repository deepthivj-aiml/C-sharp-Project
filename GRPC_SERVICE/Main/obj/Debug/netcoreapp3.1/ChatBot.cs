// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ChatBot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Main {

  /// <summary>Holder for reflection information generated from Protos/ChatBot.proto</summary>
  public static partial class ChatBotReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/ChatBot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatBotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b3MvQ2hhdEJvdC5wcm90byJvChJQcm9kdWN0TmFtZVJlcXVlc3QS",
            "EwoLVG91Y2hTY3JlZW4YASABKAkSFwoPV2VhcmFibGVNb25pdG9yGAIgASgJ",
            "EhcKD0FsYXJtTWFuYWdlbWVudBgDIAEoCRISCgpTY3JlZW5TaXplGAQgASgC",
            "IiIKC1Byb2R1Y3RuYW1lEhMKC3Byb2R1Y3ROYW1lGAEgASgJMj4KB2NoYXRi",
            "b3QSMwoOZ2V0UHJvZHVjdE5hbWUSEy5Qcm9kdWN0TmFtZVJlcXVlc3QaDC5Q",
            "cm9kdWN0bmFtZUIHqgIETWFpbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Main.ProductNameRequest), global::Main.ProductNameRequest.Parser, new[]{ "TouchScreen", "WearableMonitor", "AlarmManagement", "ScreenSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Main.Productname), global::Main.Productname.Parser, new[]{ "ProductName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProductNameRequest : pb::IMessage<ProductNameRequest> {
    private static readonly pb::MessageParser<ProductNameRequest> _parser = new pb::MessageParser<ProductNameRequest>(() => new ProductNameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductNameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Main.ChatBotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductNameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductNameRequest(ProductNameRequest other) : this() {
      touchScreen_ = other.touchScreen_;
      wearableMonitor_ = other.wearableMonitor_;
      alarmManagement_ = other.alarmManagement_;
      screenSize_ = other.screenSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductNameRequest Clone() {
      return new ProductNameRequest(this);
    }

    /// <summary>Field number for the "TouchScreen" field.</summary>
    public const int TouchScreenFieldNumber = 1;
    private string touchScreen_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TouchScreen {
      get { return touchScreen_; }
      set {
        touchScreen_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "WearableMonitor" field.</summary>
    public const int WearableMonitorFieldNumber = 2;
    private string wearableMonitor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WearableMonitor {
      get { return wearableMonitor_; }
      set {
        wearableMonitor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AlarmManagement" field.</summary>
    public const int AlarmManagementFieldNumber = 3;
    private string alarmManagement_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlarmManagement {
      get { return alarmManagement_; }
      set {
        alarmManagement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ScreenSize" field.</summary>
    public const int ScreenSizeFieldNumber = 4;
    private float screenSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScreenSize {
      get { return screenSize_; }
      set {
        screenSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductNameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductNameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TouchScreen != other.TouchScreen) return false;
      if (WearableMonitor != other.WearableMonitor) return false;
      if (AlarmManagement != other.AlarmManagement) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScreenSize, other.ScreenSize)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TouchScreen.Length != 0) hash ^= TouchScreen.GetHashCode();
      if (WearableMonitor.Length != 0) hash ^= WearableMonitor.GetHashCode();
      if (AlarmManagement.Length != 0) hash ^= AlarmManagement.GetHashCode();
      if (ScreenSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScreenSize);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TouchScreen.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TouchScreen);
      }
      if (WearableMonitor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WearableMonitor);
      }
      if (AlarmManagement.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AlarmManagement);
      }
      if (ScreenSize != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ScreenSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TouchScreen.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TouchScreen);
      }
      if (WearableMonitor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WearableMonitor);
      }
      if (AlarmManagement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlarmManagement);
      }
      if (ScreenSize != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductNameRequest other) {
      if (other == null) {
        return;
      }
      if (other.TouchScreen.Length != 0) {
        TouchScreen = other.TouchScreen;
      }
      if (other.WearableMonitor.Length != 0) {
        WearableMonitor = other.WearableMonitor;
      }
      if (other.AlarmManagement.Length != 0) {
        AlarmManagement = other.AlarmManagement;
      }
      if (other.ScreenSize != 0F) {
        ScreenSize = other.ScreenSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TouchScreen = input.ReadString();
            break;
          }
          case 18: {
            WearableMonitor = input.ReadString();
            break;
          }
          case 26: {
            AlarmManagement = input.ReadString();
            break;
          }
          case 37: {
            ScreenSize = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Productname : pb::IMessage<Productname> {
    private static readonly pb::MessageParser<Productname> _parser = new pb::MessageParser<Productname>(() => new Productname());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Productname> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Main.ChatBotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Productname() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Productname(Productname other) : this() {
      productName_ = other.productName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Productname Clone() {
      return new Productname(this);
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 1;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Productname);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Productname other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductName != other.ProductName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Productname other) {
      if (other == null) {
        return;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
